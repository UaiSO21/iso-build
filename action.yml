name: 'UaiSO21 Iso Action'

inputs:
  branch: 
    description: 'stable (default), testing, dev'
    required: false
    default: stable
  uaiso-iso-profile-plasma:
    description: 'iso profiles to clone'
    required: true

runs:
  using: "composite"
  steps:
  
    - id: install-build-dependencies
      shell: bash
      run: |
        pacman-key --init
        #add UaiSO21 key
        pacman-key -r FB39C5D54771F074
        pacman-key --lsign-key FB39C5D54771F074
        pacman -Syu --noconfirm --needed archiso sudo nano openssh rsync git github-cli zip
        pacman -Scc --noconfirm
        
    - name: ISO Build
      shell: bash
      run: |
        git clone ${{ inputs.uaiso-iso-profile-plasma }} -l uaiso-iso-profile-plasma
        
        echo '
        [uaiso21-'"${{ inputs.branch }}"']
        SigLevel = PackageRequired
        Server = http://repo-uaiso.uai21.com/${{ inputs.branch }}/$arch' | tee -a iso-profile/airootfs/etc/pacman.conf
        
        cat iso-profile/airootfs/etc/pacman.conf
        
        echo '
        [uaiso21-'"${{ inputs.branch }}"']
        SigLevel = PackageRequired
        Server = http://repo-uaiso.uai21.com/${{ inputs.branch }}/$arch' | tee -a iso-profile/pacman.conf
        
        cat iso-profile/pacman.conf
        
        if [ "${{ inputs.branch }}" != "stable" ];then
          sed -i '/iso_version/s/"/-${{ inputs.branch }}"/2' iso-profile/profiledef.sh
          sed -i "/airootfs_image_tool_options/s/=.*/=('-comp' 'zstd' '-Xcompression-level' '1' '-b' '1M')/" iso-profile/profiledef.sh
        fi
        
        cat iso-profile/profiledef.sh
        
        mkarchiso -v iso-profile
        
    - name: CheckSum
      shell: bash -O extglob {0}
      run: |
        # "Checksum"
        cd out
        echo '#!/bin/bash
        for i in *.iso; do md5sum $i >> $i.md5; done
        exit 0' > md5.sh
        bash md5.sh
        rm md5.sh
    
    - id: upload-prepare
      shell: bash -O extglob {0}
      run: |
        echo "## ssh setup"
        mkdir -p /home/runner/.ssh
        touch /home/runner/.ssh/github_actions
        chmod 600 /home/runner/.ssh/github_actions
        ssh-agent -a /tmp/ssh_agent.sock > /dev/null
        
    - id: upload-github-release
      shell: bash -O extglob {0}
      run: |
        echo "## github upload"
        release=$(date +%Y-%m-%d)

        echo ${{ github.token }} | gh auth login --with-token
        gh release create ${release} --title ${release} --repo ${{ github.repository }} --notes "automated release" || echo "release already exists"

        GITHUB_LINK=https://github.com/${GITHUB_REPOSITORY}/releases/download/${release}
        
        cd out
        ISO=$(find . -type f -name "*.iso" | sed 's|.*/||')

        if [[ -z "$(du --threshold=1950M ${ISO})" ]]; then
          # iso is small enough to upload already
          gh release upload ${release} --repo ${{ github.repository }} --clobber \
            ${ISO}
        else
          # iso is too big - creating a split-zip
          zip -j -s 1950m ${ISO}.zip ${ISO}
          
          REMOTE_FILES=$(find . -maxdepth 1 -name "*.z*" -exec basename {} \; | xargs -I{} echo "-w \"${GITHUB_LINK}/{}\"")
          gh release upload ${release} --repo ${{ github.repository }} --clobber \
            ./${ISO}+(.z*|.sha*|.pkgs|.sig|.torrent|.md5)
        fi
